@* @model CraftingServiceApp.Web.ViewModels.PaymentViewModel
<script src="https://js.stripe.com/v3/"></script>

<h2>Pay for @Model.ServiceTitle</h2>
<p>Amount: @Model.Amount EGP</p>

<button id="payButton">Pay Now</button>
<p id="paymentMessage" style="display: none;"></p>

<script>
    var stripe = Stripe("@Model.PublishableKey");
    var clientSecret = "@Model.ClientSecret"; // Use clientSecret from ViewModel

    document.getElementById("payButton").addEventListener("click", async function () {
        var payButton = document.getElementById("payButton");
        var message = document.getElementById("paymentMessage");
        payButton.disabled = true;
        message.style.display = "block";
        message.innerText = "Processing payment...";

        const result = await stripe.confirmCardPayment(clientSecret, {
            payment_method: {
                card: { /* Use an existing card element if applicable */ }
            }
        });

        if (result.error) {
            message.innerText = "Payment failed: " + result.error.message;
            payButton.disabled = false; // Re-enable button if failed
        } else if (result.paymentIntent.status === "succeeded") {
            window.location.href = "/Request/PaymentSuccess?requestId=@Model.RequestId";
        } else {
            message.innerText = "Payment processing, please wait...";
        }
    });
</script>
 *@



                  @model CraftingServiceApp.Web.ViewModels.PaymentViewModel

@{
    ViewData["Title"] = $"Payment for {Model.ServiceTitle}";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Payment for @Model.ServiceTitle</h4>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <span>Amount:</span>
                        <strong>@Model.Amount.ToString("N2") @Model.Currency</strong>
                    </div>

                    <div class="alert alert-info">
                        <small>Request ID: @Model.RequestId</small>
                    </div>

                    <form id="payment-form">
                        <div id="card-element" class="form-control py-3 mb-3"></div>
                        <div id="card-errors" role="alert" class="text-danger mb-3"></div>

                        <button id="payButton" type="button" class="btn btn-primary w-100 py-2">
                            <span id="button-text">Pay Now</span>
                            <span id="button-spinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                        </button>

                        <div id="payment-message" class="alert d-none mt-3"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        // Initialize Stripe with your publishable key
        var stripe = Stripe('@Model.PublishableKey');
        var elements = stripe.elements();

        // Custom styling
        var style = {
            base: {
                color: '#32325d',
                fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                fontSmoothing: 'antialiased',
                fontSize: '16px',
                '::placeholder': {
                    color: '#aab7c4'
                }
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a'
            }
        };

        // Create card element
        var card = elements.create('card', { style: style });
        card.mount('#card-element');

        // Handle real-time validation errors
        card.addEventListener('change', function(event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        // Handle form submission
        document.getElementById('payButton').addEventListener('click', async function() {
            var payButton = document.getElementById('payButton');
            var buttonText = document.getElementById('button-text');
            var buttonSpinner = document.getElementById('button-spinner');
            var paymentMessage = document.getElementById('payment-message');

            // Show processing state
            payButton.disabled = true;
            buttonText.textContent = 'Processing...';
            buttonSpinner.classList.remove('d-none');
            paymentMessage.classList.add('d-none');

            try {
                const { paymentIntent, error } = await stripe.confirmCardPayment('@Model.ClientSecret', {
                    payment_method: {
                        card: card,
                        billing_details: {
                            name: '@Model.ClientId' // Use client ID or name if available
                        }
                    }
                });

                if (error) {
                    showError(error.message);
                    payButton.disabled = false;
                    buttonText.textContent = 'Pay Now';
                    buttonSpinner.classList.add('d-none');
                } else if (paymentIntent.status === 'succeeded') {
                    // Verify payment with server
                    const response = await fetch('@Url.Action("ConfirmPayment", "Payment")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ paymentIntentId: '@Model.PaymentIntentId' })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        showSuccess('Payment succeeded! Redirecting...');
                        setTimeout(() => {
                            window.location.href = '@Url.Action("PaymentSuccess", "Payment", new
            {
                requestId = Model.RequestId,
                paymentIntentId = Model.PaymentIntentId
            })';
                        }, 2000);
                    } else {
                        showError('Payment verification failed: ' + result.error);
                    }
                }
            } catch (error) {
                console.error('Payment error:', error);
                showError('An unexpected error occurred: ' + error.message);
                payButton.disabled = false;
                buttonText.textContent = 'Pay Now';
                buttonSpinner.classList.add('d-none');
            }
        });

        function showError(message) {
            const paymentMessage = document.getElementById('payment-message');
            paymentMessage.textContent = message;
            paymentMessage.classList.remove('d-none', 'alert-success');
            paymentMessage.classList.add('alert-danger');
        }

        function showSuccess(message) {
            const paymentMessage = document.getElementById('payment-message');
            paymentMessage.textContent = message;
            paymentMessage.classList.remove('d-none', 'alert-danger');
            paymentMessage.classList.add('alert-success');
        }
    </script>
}